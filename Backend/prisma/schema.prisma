// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  name           String
  email          String    @unique
  password       String
  phone          String?
  role           Role      @default(CUSTOMER)
  resetToken     String?
  resetExpires   DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  orders         Order[]
  bookings       Booking[]
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

model Restaurant {
  id         String    @id @default(uuid())
  name       String
  address    String
  city       String
  postcode   String
  phone      String
  email      String
  maxSeating Int
  openTime   String
  closeTime  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  orders     Order[]
  bookings   Booking[]
  tables     Table[]
}

model MenuItem {
  id            String     @id @default(uuid())
  name          String
  description   String
  price         Decimal    @db.Decimal(10, 2)
  image         String?
  category      String
  isPopular     Boolean    @default(false)
  isVegetarian  Boolean    @default(false)
  isVegan       Boolean    @default(false)
  isGlutenFree  Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  
  orderItems    OrderItem[]
}

model Order {
  id            String     @id @default(uuid())
  orderNumber   String     @unique
  status        OrderStatus @default(PENDING)
  total         Decimal    @db.Decimal(10, 2)
  deliveryFee   Decimal?   @db.Decimal(10, 2)
  tip           Decimal?   @db.Decimal(10, 2)
  orderType     OrderType
  address       String?
  addressDetails String?
  city          String?
  postcode      String?
  scheduledTime DateTime?
  notes         String?
  paymentMethod PaymentMethod @default(CASH)
  paymentStatus PaymentStatus @default(PENDING)
  paymentIntent String?       // To store Stripe payment intent ID
  stripeSessionId String?     // To store Stripe checkout session ID

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  user          User?      @relation(fields: [userId], references: [id])
  userId        String?
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId  String
  orderItems    OrderItem[]
}

model OrderItem {
  id          String   @id @default(uuid())
  quantity    Int
  price       Decimal  @db.Decimal(10, 2)
  notes       String?
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  menuItem    MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId  String
}

enum PaymentMethod {
  CARD
  CASH
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERING
  DELIVERED
  COMPLETED
  CANCELLED
}

enum OrderType {
  DELIVERY
  PICKUP
}

model Booking {
  id             String         @id @default(uuid())
  bookingNumber  String         @unique
  date           DateTime
  time           String
  guests         Int
  status         BookingStatus  @default(PENDING)
  specialRequests String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User?          @relation(fields: [userId], references: [id])
  userId         String?
  restaurant     Restaurant     @relation(fields: [restaurantId], references: [id])
  restaurantId   String
  table          Table?         @relation(fields: [tableId], references: [id])
  tableId        String?
}

model Table {
  id            String    @id @default(uuid())
  tableNumber   Int
  capacity      Int
  isAvailable   Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId  String
  bookings      Booking[]
}

enum BookingStatus {
  PENDING
  CONFIRMED
  SEATED
  COMPLETED
  CANCELLED
}